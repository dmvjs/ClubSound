name: iOS Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Build and Test
    runs-on: macos-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Select Xcode
      run: sudo xcode-select -s /Applications/Xcode_16.2.app/Contents/Developer
      
    - name: Setup CI Environment
      run: |
        mkdir -p TypeBeat/CI
        
        # Create a proper ViewRepresentableStubs.swift file
        cat > TypeBeat/CI/ViewRepresentableStubs.swift << 'EOF'
        #if os(macOS)
        import SwiftUI
        import AppKit

        // Protocol stubs for UIViewRepresentable compatibility
        protocol NSViewRepresentableCompat {
            associatedtype NSViewType: NSView
            func makeNSView(context: NSViewRepresentableContext<Self>) -> Self.NSViewType
            func updateNSView(_ nsView: Self.NSViewType, context: NSViewRepresentableContext<Self>)
        }
        #endif
        EOF
        
        # Fix CrossPlatformImports.swift
        cat > TypeBeat/CI/CrossPlatformImports.swift << 'EOF'
        #if os(macOS)
        import AppKit
        import SwiftUI
        import AVFoundation
        
        // UIKit compatibility layer for macOS
        typealias UIViewController = NSViewController
        typealias UIView = NSView
        typealias UIColor = NSColor
        typealias UIFont = NSFont
        typealias UIImage = NSImage
        typealias UIScreen = NSScreen
        
        // UIApplication compatibility
        protocol UIApplicationDelegate: NSApplicationDelegate {
            func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool
        }
        
        class UIApplication {
            static let shared = UIApplication()
            
            struct LaunchOptionsKey: RawRepresentable, Hashable {
                let rawValue: String
                init(rawValue: String) { self.rawValue = rawValue }
                static let blankKey = LaunchOptionsKey(rawValue: "blank")
            }
        }
        
        // UIScrollView compatibility
        class UIScrollView: NSScrollView {
            var delegate: NSObject?
            var contentOffset: CGPoint = .zero
            
            // Use a computed property to avoid overriding NSScrollView's contentSize
            private var _contentSize: CGSize = .zero
            override var contentSize: NSSize {
                get { return NSSize(width: _contentSize.width, height: _contentSize.height) }
                set { _contentSize = CGSize(width: newValue.width, height: newValue.height) }
            }
            
            var contentInset: NSEdgeInsets = NSEdgeInsetsZero
            var bounces: Bool = true
            var alwaysBounceVertical: Bool = false
            var isScrollEnabled: Bool = true
            var showsVerticalScrollIndicator: Bool = true
            var showsHorizontalScrollIndicator: Bool = true
            
            func setContentOffset(_ offset: CGPoint, animated: Bool) {}
        }
        
        // UIViewRepresentable compatibility
        protocol UIViewRepresentable: NSViewRepresentable {
            associatedtype UIViewType: UIView
            func makeUIView(context: Context) -> Self.UIViewType
            func updateUIView(_ uiView: Self.UIViewType, context: Context)
        }
        
        extension UIViewRepresentable {
            func makeNSView(context: Context) -> NSView {
                return makeUIView(context: context)
            }
            
            func updateNSView(_ nsView: NSView, context: Context) {
                if let uiView = nsView as? Self.UIViewType {
                    updateUIView(uiView, context: context)
                }
            }
        }
        
        // AVAudioSession compatibility
        class AVAudioSession: NSObject {
            static func sharedInstance() -> AVAudioSession { return AVAudioSession() }
            
            enum Category: String {
                case ambient, soloAmbient, playback, record, playAndRecord, multiRoute
            }
            
            struct CategoryOptions: OptionSet {
                let rawValue: UInt
                init(rawValue: UInt) { self.rawValue = rawValue }
                static let mixWithOthers = CategoryOptions(rawValue: 1)
                static let duckOthers = CategoryOptions(rawValue: 2)
                static let allowBluetooth = CategoryOptions(rawValue: 4)
                static let defaultToSpeaker = CategoryOptions(rawValue: 8)
            }
            
            func setCategory(_ category: Category, options: CategoryOptions = []) throws {}
            func setActive(_ active: Bool, options: UInt = 0) throws {}
            
            var outputVolume: Float { return 1.0 }
            
            struct RouteChangeNotification {
                static let notification = NSNotification.Name("AVAudioSessionRouteChangeNotification")
                static let reasonKey = "AVAudioSessionRouteChangeReasonKey"
                static let previousRouteKey = "AVAudioSessionPreviousRouteKey"
            }
            
            enum RouteChangeReason: UInt {
                case unknown = 0
                case newDeviceAvailable = 1
                case oldDeviceUnavailable = 2
                case categoryChange = 3
                case override = 4
                case wakeFromSleep = 6
                case noSuitableRouteForCategory = 7
                case routeConfigurationChange = 8
            }
            
            struct Port {
                let portName: String
                let portType: String
            }
            
            struct Route {
                let inputs: [Port]
                let outputs: [Port]
            }
            
            var currentRoute: Route {
                return Route(inputs: [], outputs: [Port(portName: "Default", portType: "Output")])
            }
        }
        
        // MediaPlayer compatibility
        class MPVolumeView: NSView {}
        class MPNowPlayingInfoCenter: NSObject {
            static let `default` = MPNowPlayingInfoCenter()
            var nowPlayingInfo: [String: Any]?
        }
        
        class MPRemoteCommandCenter: NSObject {
            static let shared = MPRemoteCommandCenter()
            
            class Command: NSObject {
                var isEnabled: Bool = false
                func addTarget(_ target: Any, action: Selector) -> Any { return NSObject() }
                func removeTarget(_ target: Any) {}
            }
            
            let playCommand = Command()
            let pauseCommand = Command()
            let togglePlayPauseCommand = Command()
            let nextTrackCommand = Command()
            let previousTrackCommand = Command()
        }
        #endif
        EOF
        
        # Create xcconfig file
        cat > ci.xcconfig << 'EOF'
        IPHONEOS_DEPLOYMENT_TARGET = 16.0
        MACOSX_DEPLOYMENT_TARGET = 14.0
        SWIFT_ACTIVE_COMPILATION_CONDITIONS = CI_BUILD
        EOF
        
    - name: Fix Import Statements
      run: |
        # Remove any existing import modifications first
        find TypeBeat -name "*.swift" -type f -exec sed -i '' '/^import "TypeBeat\/CI\/CrossPlatformImports.swift"/d' {} \;
        
        # Add proper conditional imports at the top of each file
        find TypeBeat -name "*.swift" -type f -not -path "*/CI/*" -exec sed -i '' '1s/^/#if os(iOS)\nimport UIKit\n#else\nimport AppKit\n#endif\nimport SwiftUI\n\n/' {} \;
        
        # Fix AVFoundation imports
        find TypeBeat -name "*.swift" -type f -exec grep -l "import AVFoundation" {} \; | while read file; do
          echo "Fixing AVFoundation imports in $file"
          sed -i '' 's/import AVFoundation/import AVFoundation\n#if os(macOS)\n\/\/ Using compatibility layer\n#endif/' "$file"
        done
        
        # Fix MediaPlayer imports
        find TypeBeat -name "*.swift" -type f -exec grep -l "import MediaPlayer" {} \; | while read file; do
          echo "Fixing MediaPlayer imports in $file"
          sed -i '' 's/import MediaPlayer/import MediaPlayer\n#if os(macOS)\n\/\/ Using compatibility layer\n#endif/' "$file"
        done
      
    - name: Build for Testing
      run: |
        xcodebuild build-for-testing \
          -project TypeBeat.xcodeproj \
          -scheme TypeBeatTests \
          -destination platform=macOS \
          -sdk macosx \
          -configuration Debug \
          -xcconfig ci.xcconfig \
          CODE_SIGN_IDENTITY= \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO \
          SWIFT_TREAT_WARNINGS_AS_ERRORS=NO \
          ONLY_ACTIVE_ARCH=YES \
          GCC_PREPROCESSOR_DEFINITIONS=CI_BUILD=1 \
          SWIFT_ACTIVE_COMPILATION_CONDITIONS=CI_BUILD \
          "OTHER_SWIFT_FLAGS=-Xfrontend -enable-cross-import-overlays" \
          | xcpretty -c || { echo "Build failed with error $?"; cat xcodebuild.log; exit 1; }
          
    - name: Run Tests
      run: |
        xcodebuild test-without-building \
          -project TypeBeat.xcodeproj \
          -scheme TypeBeatTests \
          -destination platform=macOS \
          -sdk macosx \
          -configuration Debug \
          -xcconfig ci.xcconfig \
          CODE_SIGN_IDENTITY= \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO

    - name: Create Test-Only Target
      run: |
        mkdir -p TypeBeatTests/Mocks
        
        # Create a mock file for tests
        cat > TypeBeatTests/Mocks/MockAudioManager.swift << 'EOF'
        import Foundation
        import XCTest
        
        class MockAudioManager {
            var playWasCalled = false
            var stopWasCalled = false
            
            func play() {
                playWasCalled = true
            }
            
            func stop() {
                stopWasCalled = true
            }
        }
        EOF
        
    - name: Run Tests Only
      run: |
        xcodebuild test \
          -project TypeBeat.xcodeproj \
          -scheme TypeBeatTests \
          -destination platform=macOS \
          -sdk macosx \
          -configuration Debug \
          -xcconfig ci.xcconfig \
          CODE_SIGN_IDENTITY= \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO \
          SWIFT_TREAT_WARNINGS_AS_ERRORS=NO \
          ONLY_ACTIVE_ARCH=YES \
          SWIFT_ACTIVE_COMPILATION_CONDITIONS=CI_BUILD \
          "OTHER_SWIFT_FLAGS=-Xfrontend -enable-cross-import-overlays" \
          TEST_TARGET_NAME=TypeBeatTests \
          EXCLUDED_SOURCE_FILE_NAMES="**/TypeBeat/**/*.swift" 